<?php

class DataBase
{
    //Server address
	private $server = "";

    //Name of the database
	private $dbName = "";

    //User
	private $user = "";

    //Password
	private $pwd = "";
	
    //Connection link to the database
	private $link = null;
	
	/**
	 * Constructor
	 * @param type $valServer Server address
	 * @param type $valDBName Name of the database
	 * @param type $valUser User
	 * @param type $valPwd Password
	 */
	protected function __construct($valServer, $valDBName, $valUser, $valPwd)
	{
		$this->server = $valServer;
		$this->dbName = $valDBName;
		$this->user = $valUser;
		$this->pwd = $valPwd;
	}
	
	/**
	 * Destructor
	 */
	function __destruct()
	{
		$this->disconnect();
	}
	
	/**
	 * Connects to the database
	 * @return True if connection is successful, false else
	 */
	protected function connect()
	{
		$valRet = false;
		
		$this->link = new PDO('mysql:host='.$this->server.';dbname='.$this->dbName, $this->user, $this->pwd, array(PDO::MYSQL_ATTR_INIT_COMMAND => 'SET NAMES utf8'));
		$this->link->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
        $this->link->setAttribute(PDO::ATTR_EMULATE_PREPARES, false);

		return $valRet;
	}
	
	/**
	 * Disconnects from the database
	 */
	protected function disconnect()
	{
		$this->link = null;
	}
	
	/**
	 * Executes a SELECT request
	 * @param type $requete SQL request to execute
     * @param type $params Parameters of the request ( ['name' => 'parameter_name', 'value' => 'parameter_value', 'type' => 'int|string'] )
	 * @param type $resultat Results given by the request
	 * @return True if the request returns results, false else
	 */
	public function get($requete, &$resultat, $params = array())
	{
		$valRet = false;
		
		if($this->link)
		{
            if(count($params))
            {
			    $query = $this->link->prepare($requete);

                foreach($params as $param)
                {
                    $query->bindValue($param['name'], $param['value'], $this->getPDOType($param['type']));
                }

                $statement = $query->execute();

                if($statement !== false)
                {			
                    $resultat = $query->fetchAll(PDO::FETCH_ASSOC);
                }
            }
            else
            {
                $statement = $this->link->query($requete);

                if($statement !== false)
                {
                    $resultat = $statement->fetchAll(PDO::FETCH_ASSOC);
                }
            }
		
            if(count($resultat))
                $valRet = true;
		}
		
		return $valRet;
	}
	
	/**
	 * Executes UPDATE, INSERT, DELETE requests (without results)
	 * @param $requete Request to execute
     * @param $params Parameters of the request ( ['name' => 'parameter_name', 'value' => 'parameter_value', 'type' => 'int | string'] )
     * @return True is the request is successful
	 */
	public function execute($requete, $params = array())
	{
		$valRet = false;
						
		if($this->link)
		{
            if(count($params))
            {
			    $query = $this->link->prepare($requete);

                foreach($params as $param)
                {
                    $query->bindValue($param['name'], $param['value'], $this->getPDOType($param['type']));
                }

                $valRet = $query->execute() !== false;
            }
            else
            {
                $valRet = $this->link->query($requete) !== false;
            }
		}
		
		return $valRet;
	}

    /**
     * Returns parameter PDOType from a string description
     */
    private function getPDOType($type)
    {
        $valRet = '';

        if($type == 'bool')
            $valRet = PDO::PARAM_BOOL;
        else if($type == 'int')
            $valRet = PDO::PARAM_INT;
        else
            $valRet = PDO::PARAM_STR;

        return $valRet;
    }
    
    /**
     * Returns the ID generated by the last INSERT request
     */
    public function getLastId()
    {   
        if($this->link)
        {
            return $this->link->lastInsertId();
        }
        
        return 0;
    }

    /**
     * Returns a UUID generated by the database
     */
    public function getUUID()
    {
        if($this->link)
        {
            $result = $this->link->query("SELECT UUID() as id;");
            
            $array = $result->fetch();
            
            return $array['id'];
        }

        return '';
    }
}
?>